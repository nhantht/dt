@model Website.Models.SearchResult
@using PagedList.Mvc;
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    Service.Index.Link linkObj = new Service.Index.Link();
    List<SelectListItem> priceOrderList = new List<SelectListItem>();
    priceOrderList.Add(new SelectListItem
    {
        Text = "Relevant",
        Value = "1"
    });
    priceOrderList.Add(new SelectListItem
    {
        Text = "Low - High",
        Value = "2",
        Selected = true
    });
    priceOrderList.Add(new SelectListItem
    {
        Text = "High - Low",
        Value = "3"
    });
    Service.ADV.Currency currencyObj = new Service.ADV.Currency();
    List<SelectListItem> currencyList = (from x in currencyObj.GetList()
                                         select new SelectListItem
                                         {
                                             Text = x.Name,
                                             Value = x.Code
                                         }).ToList();
}

<style>
    input::-webkit-input-placeholder {
        font-size: 1em;
        line-height: 2;
    }

    .page-header {
        background-color: whitesmoke;
        height: 55px;
    }

    .logo {
        height: 49px;
        width: 49px;
    }

    #searchBox {
        display: inline-block;
        position: relative;
        top: -8px;
    }

    .search-text {
        width: 600px;
    }

    .search-section {
        width: 100%;
    }

    .adv-container {
        width: 100%;
        position: fixed;
        height: 400px;
        overflow-y: auto;
        overflow-x: hidden;
    }

    .select-no-border {
        border: none;
    }

    .title {
        font-weight: bold;
    }

    .url-title {
        color: #253E7C;
        font-size: 1.2em;
    }

    .relative-search-title {
        color: gray;
        font-size: 1.2em;
    }

    .relative-search {
        color: #253E7C;
    }

    a {
        color: darkgreen;
    }

    .short-description {
    }

    .price {
        color: #DAC09D;
        font-size: 1.5em;
        font-weight: bold;
    }

    .padding-content {
        text-align: left;
        padding-left: 71px;
        padding-right: 71px;
    }

    .blur-text {
        color: gray;
    }

    .start-icon {
        width: 15px;
        position: relative;
        top: -3px;
    }

    .adv-picture {
        width: 44%;
    }

    input[type="number"] {
        height: 30px;
    }
</style>
<table id="searchBox">
    <tr>
        <td><a href="~/Home/Index"><img src="../images/logo.png" class="logo"></a></td>
        <td>
            @Html.EditorFor(model => model.Keyword, new { htmlAttributes = new { id = "txtSearch", maxlength = 200, @class = "search-text form-control", placeholder = "Please enter your keyword to search." } })
        </td>
        <td class="search-button-container">
            <input type="button" class="search-button" onclick="search();" value="" tabindex="0" name="go">
        </td>
    </tr>
</table>
<div class="container-fluid">
    <div class="row">
        <div class="col-md-12 padding-content">
            <span class="title">Price: </span>
            @Html.DropDownListFor(model => model.PriceOrder, priceOrderList, "-- Select Order --", new { htmlAttributes = new { id = "priceOrder" } })
            @*<select style="height:25px" id="lstPriceOrder" class="select-no-border">
                    <option value="1" selected>Relevant</option>
                    <option value="2">Low - High</option>
                    <option value="3">High - Low</option>
                </select>*@
            <span class="title" style="padding-left:20px">Price Range: </span>
            @Html.EditorFor(model => model.FromPrice, new { htmlAttributes = new { id = "fromPrice", style = "width:80px;", type = "number" } })
            -
            @Html.EditorFor(model => model.ToPrice, new { htmlAttributes = new { id = "toPrice", style = "width:80px;", type = "number" } })
            <span class="title" style="padding-left:20px">Unit: </span>
            @Html.DropDownListFor(model => model.Currency, currencyList, null, new { htmlAttributes = new { id = "lstCurrency", style = "height:25px", @class = "select-no-border" } })
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 padding-content">
            <hr />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 padding-content">
            <div class="blur-text">About <span id="resultNumber">@Model.Links.Count</span> results</div>
            <br />
        </div>
    </div>
    <div class="row">
        <div class="col-md-6" style="text-align:left;padding-left:71px">
            @foreach (Website.Models.IndexDetailModel link in Model.Links)
            {
                <table class="search-section" border="0">
                    <tr>
                        <td colspan="2" style="text-align:left">
                            <div style="display:inline-block;">
                                <div class="url-title">@link.Title</div>
                                <div><a href="@link.URL" class="url-href">@link.URL</a></div>
                                <div class="blur-text">
                                    @for (int i = 1; i <= Math.Round(link.Rating); i++)
                                    {
                                        <img src="~/Images/Icons/light-star.png" class="start-icon" />
                                    }
                                    @for (int i = 1; i <= (5 - Math.Round(link.Rating)); i++)
                                    {
                                        <img src="~/Images/Icons/star.png" class="start-icon" />
                                    }
                                    <span>Rating: <span>@link.Rating</span></span> - <span>@link.Reviews</span> reviews
                                </div>
                                <div class="short-description">@link.ShortDescription</div>
                                <div class="pull-right">
                                    <span class="price">$@link.Price</span>
                                </div>
                                @if (User.Identity.IsAuthenticated)
                                {
                                    <div class="">
                                        <span style="display:inline-block">Reason: </span>
                                        <input type="text" class="form-control" style="width:200px;display:inline-block" />
                                        <button class="btn btn-primary invalid-url-button" value="Report Error">Report Error</button>
                                    </div>
                                }
                            </div>
                        </td>
                    </tr>
                </table>
            }
            <br />
            @if (Model.RelativeKeywords.Count > 0)
            {
                <span class="relative-search-title">Searches related to @Model.Keyword</span>
            }
            @{
                string cell1Value = string.Empty;
                string cell2Value = string.Empty;
            }
            @for (int i = 0; i < Model.RelativeKeywords.Count; i++)
            {
                cell1Value = Model.RelativeKeywords[i].Keyword;
                i++;
                cell2Value = string.Empty;
                if (i < Model.RelativeKeywords.Count)
                {
                    cell2Value = Model.RelativeKeywords[i].Keyword;
                }
                <div class="row" style="width:400px">
                    <div class="col-md-6"><a href="#" class="relative-search">@cell1Value</a></div>
                    <div class="col-md-6"><a href="#" class="relative-search">@cell2Value</a></div>
                </div>
            }
            <br />
            Page @(Model.Links.PageCount < Model.Links.PageNumber ? 0 : Model.Links.PageNumber) of @Model.Links.PageCount

            @Html.PagedListPager(Model.Links, page => Url.Action("search",
            new { page, priceOrder = Model.PriceOrder, fromPrice = Model.FromPrice, toPrice = Model.ToPrice, currency = Model.Currency, keyword = Model.Keyword }))
        </div>
        <div class="col-md-6" style="text-align:left">
            <div class="adv-container">
                @foreach (Service.ADV.SearchURL URL in Model.URLs)
                {
                    <table border="0">
                        <tr>
                            <td colspan="2" style="text-align:left">
                                @if (string.IsNullOrEmpty(URL.Picture) == false)
                                {
                                    <img src="~/Uploads/@URL.Picture" width="100%" />
                                }
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2" style="text-align:left">
                                <div style="display:inline-block;">
                                    <div class="url-title">@URL.Title</div>
                                    <div><a href="@URL.URL" class="url-href">@URL.URL</a></div>
                                    <div class="blur-text">
                                        @for (int i = 1; i <= Math.Round(URL.Rating); i++)
                                        {
                                            <img src="~/Images/Icons/light-star.png" class="start-icon" />
                                        }
                                        @for (int i = 1; i <= (5 - Math.Round(URL.Rating)); i++)
                                        {
                                            <img src="~/Images/Icons/star.png" class="start-icon" />
                                        }
                                        <span>Rating: <span>@URL.Rating.ToString("n1")</span></span> - <span>@URL.Reviews.ToString("n0")</span> reviews
                                    </div>
                                    <div class="short-description">@URL.ShortDescription</div>
                                    <div class="pull-right">
                                        <span class="price">$@URL.Price</span>
                                    </div>
                                    @if (User.Identity.IsAuthenticated)
                                    {
                                        <div class="">
                                            <span style="display:inline-block">Reason: </span>
                                            <input type="text" class="form-control" style="width:200px;display:inline-block" />
                                            <button class="btn btn-primary invalid-url-button" value="Report Error">Report Error</button>
                                        </div>
                                    }
                                </div>
                            </td>
                        </tr>
                    </table>
                }
            </div>
        </div>
    </div>
</div>
<script>
    $(document).ready(function () {
        $("#txtSearch").focus();
        $("#btnSearch").bind("click", function () {
            document.location = "/adv/search";
        });
        $("#logoContainer").remove();
        $(".middle-content").removeClass("middle-content");

        $("#searchBox").insertBefore($(".page-header").children().first());
        $(".search-section").width($(".search-section").width() - ($(".logo").width() * 2) - 18);
        $(".invalid-url-button").prev().attr("placeholder", "Please enter a reason on report");
        $(".invalid-url-button").click(function () {
            if ($(this).prev().val().trim().length == 0) {
                $(this).prev().focus();
            } else {
                Util.Layout.showLoading();
                $.ajax({
                    type: "post",
                    data: { reason: $(this).prev().val().trim(), URL: $(this).closest("td").find(".url-href").attr("href") },
                    url: "ReportInvalidURL",
                    success: function (result) {
                        Util.Layout.hideLoading();
                        alert("Sent!");
                    },
                    error: function () {
                        Util.Layout.hideLoading();
                    }
                });
            }
        });
        boldFoundWord();
    });
    function boldFoundWord() {
        var keyword = $("#txtSearch").val().trim();
        var titles = $(".url-title");
        var hrefs = $(".url-href");
        var descriptions = $(".short-description");
        var relativeKeywords = $(".relative-search");
        if (keyword.length > 0) {
            var words = keyword.split(" ");
            $.each(words, function (i, word) {
                if (word.trim().length > 0) {
                    for (var j = 0; j < titles.length; j++) {
                        $(titles[j]).html(replaceAll($(titles[j]).html(), word, "<b>" + word + "</b>"));
                        $(hrefs[j]).html(replaceAll($(hrefs[j]).text(), word, "<b>" + word + "</b>"));
                        $(descriptions[j]).html(replaceAll($(descriptions[j]).html(), word, "<b>" + word + "</b>"));
                    }
                }
                for (var k = 0; k < relativeKeywords.length; k++) {
                    $(relativeKeywords[k]).html(replaceAll($(relativeKeywords[k]).text(), word, "<b>" + word + "</b>"));
                }
            });
        }
    }
    function replaceAll(text, oldWord, newWord) {
        var result = text.toLowerCase().split(oldWord.toLowerCase()).join(newWord);
        return result;
    }
    function search() {
        //Keyword
        var keyword = $("#txtSearch").val().trim();
        //Price order
        var priceOrder = $("#PriceOrder").val();
        //Price range
        var fromPrice = $("#fromPrice").val();
        var toPrice = $("#toPrice").val();
        //Currency
        var currency = $("#Currency").val();

        if (keyword.length == 0) {
            $("#txtSearch").focus();
            return false;
        } else {
            var location = "search?keyword=" + keyword + "&priceOrder=" + priceOrder + "&currency=" + currency;
            if ($.trim(fromPrice).length > 0) {
                location += "&fromPrice=" + fromPrice;
            }
            if ($.trim(toPrice).length > 0) {
                location += "&toPrice=" + toPrice;
            }
            document.location = location;
        }
    }
</script>
