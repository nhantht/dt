//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class dtEntities1 : DbContext
    {
        public dtEntities1()
            : base("name=dtEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Campaign> Campaigns { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<Device> Devices { get; set; }
        public virtual DbSet<DeviceType> DeviceTypes { get; set; }
        public virtual DbSet<DeviceTypeURL> DeviceTypeURLs { get; set; }
        public virtual DbSet<NegativeMarch> NegativeMarchs { get; set; }
        public virtual DbSet<PriceURL> PriceURLs { get; set; }
        public virtual DbSet<Status> Statuses { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
        public virtual DbSet<TelephoneCode> TelephoneCodes { get; set; }
        public virtual DbSet<TimeFrame> TimeFrames { get; set; }
        public virtual DbSet<TransactionHistory> TransactionHistories { get; set; }
        public virtual DbSet<URL> URLs { get; set; }
        public virtual DbSet<Table_1> Table_1 { get; set; }
        public virtual DbSet<View_CategoryList> View_CategoryList { get; set; }
        public virtual DbSet<View_Cities> View_Cities { get; set; }
        public virtual DbSet<View_URLAllDeviceTypes> View_URLAllDeviceTypes { get; set; }
        public virtual DbSet<View_Users> View_Users { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Keyword> Keywords { get; set; }
        public virtual DbSet<Schedule> Schedules { get; set; }
        public virtual DbSet<Link> Links { get; set; }
    
        public virtual ObjectResult<SP_GetURLAllDevices_Result> SP_GetURLAllDevices(Nullable<decimal> dEVICE_ID, string pICTUREURL, Nullable<decimal> uRL_ID)
        {
            var dEVICE_IDParameter = dEVICE_ID.HasValue ?
                new ObjectParameter("DEVICE_ID", dEVICE_ID) :
                new ObjectParameter("DEVICE_ID", typeof(decimal));
    
            var pICTUREURLParameter = pICTUREURL != null ?
                new ObjectParameter("PICTUREURL", pICTUREURL) :
                new ObjectParameter("PICTUREURL", typeof(string));
    
            var uRL_IDParameter = uRL_ID.HasValue ?
                new ObjectParameter("URL_ID", uRL_ID) :
                new ObjectParameter("URL_ID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetURLAllDevices_Result>("SP_GetURLAllDevices", dEVICE_IDParameter, pICTUREURLParameter, uRL_IDParameter);
        }
    
        public virtual ObjectResult<SP_GetURLAllDevices2_Result> SP_GetURLAllDevices2(Nullable<decimal> dEVICE_ID, string pICTUREURL, Nullable<decimal> uRL_ID)
        {
            var dEVICE_IDParameter = dEVICE_ID.HasValue ?
                new ObjectParameter("DEVICE_ID", dEVICE_ID) :
                new ObjectParameter("DEVICE_ID", typeof(decimal));
    
            var pICTUREURLParameter = pICTUREURL != null ?
                new ObjectParameter("PICTUREURL", pICTUREURL) :
                new ObjectParameter("PICTUREURL", typeof(string));
    
            var uRL_IDParameter = uRL_ID.HasValue ?
                new ObjectParameter("URL_ID", uRL_ID) :
                new ObjectParameter("URL_ID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetURLAllDevices2_Result>("SP_GetURLAllDevices2", dEVICE_IDParameter, pICTUREURLParameter, uRL_IDParameter);
        }
    
        public virtual ObjectResult<SP_GetURLAllPrices_Result> SP_GetURLAllPrices(Nullable<decimal> cURRENCY_ID, Nullable<decimal> uRL_ID)
        {
            var cURRENCY_IDParameter = cURRENCY_ID.HasValue ?
                new ObjectParameter("CURRENCY_ID", cURRENCY_ID) :
                new ObjectParameter("CURRENCY_ID", typeof(decimal));
    
            var uRL_IDParameter = uRL_ID.HasValue ?
                new ObjectParameter("URL_ID", uRL_ID) :
                new ObjectParameter("URL_ID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetURLAllPrices_Result>("SP_GetURLAllPrices", cURRENCY_IDParameter, uRL_IDParameter);
        }
    
        public virtual ObjectResult<SP_GetURLAllDeviceTypes2_Result> SP_GetURLAllDeviceTypes2(Nullable<decimal> dEVICETYPE_ID, string pICTUREURL, Nullable<decimal> uRL_ID)
        {
            var dEVICETYPE_IDParameter = dEVICETYPE_ID.HasValue ?
                new ObjectParameter("DEVICETYPE_ID", dEVICETYPE_ID) :
                new ObjectParameter("DEVICETYPE_ID", typeof(decimal));
    
            var pICTUREURLParameter = pICTUREURL != null ?
                new ObjectParameter("PICTUREURL", pICTUREURL) :
                new ObjectParameter("PICTUREURL", typeof(string));
    
            var uRL_IDParameter = uRL_ID.HasValue ?
                new ObjectParameter("URL_ID", uRL_ID) :
                new ObjectParameter("URL_ID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetURLAllDeviceTypes2_Result>("SP_GetURLAllDeviceTypes2", dEVICETYPE_IDParameter, pICTUREURLParameter, uRL_IDParameter);
        }
    
        public virtual int SP_KickOutOtherUsers(string loginUserPhone)
        {
            var loginUserPhoneParameter = loginUserPhone != null ?
                new ObjectParameter("LoginUserPhone", loginUserPhone) :
                new ObjectParameter("LoginUserPhone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_KickOutOtherUsers", loginUserPhoneParameter);
        }
    
        [DbFunction("dtEntities1", "FNC_Split")]
        public virtual IQueryable<string> FNC_Split(string inputString, string delimiter)
        {
            var inputStringParameter = inputString != null ?
                new ObjectParameter("InputString", inputString) :
                new ObjectParameter("InputString", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[dtEntities1].[FNC_Split](@InputString, @Delimiter)", inputStringParameter, delimiterParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int SP_KickOutOtherSessions(string loginUserPhone)
        {
            var loginUserPhoneParameter = loginUserPhone != null ?
                new ObjectParameter("LoginUserPhone", loginUserPhone) :
                new ObjectParameter("LoginUserPhone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_KickOutOtherSessions", loginUserPhoneParameter);
        }
    }
}
